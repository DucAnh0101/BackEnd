// <auto-generated />
using System;
using BusinessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusiniessObject.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Models.DeviceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DeviceTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeName = "Gamma"
                        },
                        new
                        {
                            Id = 2,
                            TypeName = "Gamma Spectrum"
                        },
                        new
                        {
                            Id = 3,
                            TypeName = "XRF"
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.GammaCalibration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("HeSoChuanMay")
                        .HasColumnType("float");

                    b.Property<double>("Khoang")
                        .HasColumnType("float");

                    b.Property<int>("MeasuringDeviceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeasuringDeviceId");

                    b.ToTable("GammaCalibrations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HeSoChuanMay = 0.97999999999999998,
                            Khoang = 50.0,
                            MeasuringDeviceId = 1
                        },
                        new
                        {
                            Id = 2,
                            HeSoChuanMay = 1.05,
                            Khoang = 14.0,
                            MeasuringDeviceId = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.Hydrology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("DistanceToWaterSource")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("distance_to_water_source");

                    b.Property<decimal?>("SurfaceWaterDistance")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("surface_water_distance");

                    b.Property<string>("SurfaceWaterFeatures")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("surface_water_features");

                    b.Property<decimal?>("SurfaceWaterFlow")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("surface_water_flow");

                    b.Property<decimal?>("SurfaceWaterLevel")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("surface_water_level");

                    b.Property<string>("SurfaceWaterType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("surface_water_type");

                    b.Property<int>("SurveyPointId")
                        .HasColumnType("int")
                        .HasColumnName("survey_point_id");

                    b.Property<decimal?>("WaterFlow")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("water_flow");

                    b.Property<decimal?>("WaterLevel")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("water_level");

                    b.Property<bool>("WaterPresence")
                        .HasColumnType("bit")
                        .HasColumnName("water_presence");

                    b.Property<string>("WaterSourceFeatures")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("water_source_features");

                    b.HasKey("Id");

                    b.HasIndex("SurveyPointId")
                        .IsUnique();

                    b.ToTable("Hydrologies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DistanceToWaterSource = 50.0m,
                            SurfaceWaterDistance = 45.0m,
                            SurfaceWaterFeatures = "Clean flowing water",
                            SurfaceWaterFlow = 0.8m,
                            SurfaceWaterLevel = 1.8m,
                            SurfaceWaterType = "River",
                            SurveyPointId = 1,
                            WaterFlow = 1.2m,
                            WaterLevel = 2.5m,
                            WaterPresence = true,
                            WaterSourceFeatures = "Small river nearby"
                        },
                        new
                        {
                            Id = 2,
                            DistanceToWaterSource = 200.0m,
                            SurveyPointId = 2,
                            WaterPresence = false,
                            WaterSourceFeatures = "Distant water source"
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.LocationDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("location_description");

                    b.Property<string>("Infrastructure")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("infrastructure");

                    b.Property<decimal?>("PopulationDensity")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("population_density");

                    b.Property<string>("Residents")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("residents");

                    b.Property<int>("SurveyPointId")
                        .HasColumnType("int")
                        .HasColumnName("survey_point_id");

                    b.Property<string>("SurveyPointType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("survey_point_type");

                    b.HasKey("Id");

                    b.HasIndex("SurveyPointId")
                        .IsUnique();

                    b.ToTable("LocationDescriptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Central urban area with high population density",
                            Infrastructure = "Good roads, electricity, water supply",
                            PopulationDensity = 1500.50m,
                            Residents = "Mixed residential and commercial",
                            SurveyPointId = 1,
                            SurveyPointType = "Urban"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Suburban area with moderate population",
                            Infrastructure = "Basic infrastructure available",
                            PopulationDensity = 800.25m,
                            Residents = "Mainly residential",
                            SurveyPointId = 2,
                            SurveyPointType = "Suburban"
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.MeasuringDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeviceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.ToTable("MeasuringDevices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeviceTypeId = 1,
                            SerialNumber = "GAMMA001"
                        },
                        new
                        {
                            Id = 2,
                            DeviceTypeId = 2,
                            SerialNumber = "GAMMASPEC001"
                        },
                        new
                        {
                            Id = 3,
                            DeviceTypeId = 3,
                            SerialNumber = "XRF001"
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

<<<<<<< HEAD
                    b.ToTable("Notifications", (string)null);
=======
                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
>>>>>>> bb063965eb18aa536877f24cea1b04219b632ccf

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Kiểm tra thiết bị đo Gamma",
                            RequiredDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Lập kế hoạch hiệu chuẩn XRF",
                            RequiredDate = new DateTime(2025, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.PhoGammaInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("K")
                        .HasColumnType("float");

                    b.Property<int>("MeasuringDeviceId")
                        .HasColumnType("int");

                    b.Property<double>("Th")
                        .HasColumnType("float");

                    b.Property<double>("U")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MeasuringDeviceId");

                    b.ToTable("PhoGammaInfos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            K = 12.5,
                            MeasuringDeviceId = 2,
                            Th = 3.1000000000000001,
                            U = 5.2000000000000002
                        },
                        new
                        {
                            Id = 2,
                            K = 14.0,
                            MeasuringDeviceId = 2,
                            Th = 3.7999999999999998,
                            U = 4.9000000000000004
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.Project", b =>
                {
                    b.Property<int>("PrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrId"));

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_delete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProposalId")
                        .HasColumnType("int");

                    b.HasKey("PrId");

                    b.HasIndex("ProposalId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            PrId = 1,
                            CreatedDate = new DateOnly(2025, 1, 15),
                            EndDate = new DateOnly(2025, 5, 1),
                            IsDelete = false,
                            Name = "Project A",
                            ProposalId = 1
                        },
                        new
                        {
                            PrId = 2,
                            CreatedDate = new DateOnly(2025, 2, 15),
                            EndDate = new DateOnly(2025, 5, 1),
                            IsDelete = false,
                            Name = "Project B",
                            ProposalId = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.Proposal", b =>
                {
                    b.Property<int>("PId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PId"));

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_delete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PId");

                    b.HasIndex("UserId");

                    b.ToTable("Proposals");

                    b.HasData(
                        new
                        {
                            PId = 1,
                            CreatedDate = new DateOnly(2025, 1, 1),
                            EndDate = new DateOnly(2025, 5, 1),
                            IsDelete = false,
                            Name = "Proposal Alpha",
                            UserId = 1
                        },
                        new
                        {
                            PId = 2,
                            CreatedDate = new DateOnly(2025, 2, 1),
                            EndDate = new DateOnly(2025, 5, 1),
                            IsDelete = false,
                            Name = "Proposal Beta",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("answer_text");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("questionWriting");

                    b.HasKey("Id")
                        .HasName("PK__question__3213E83F197C22A5");

                    b.HasIndex("GroupId");

                    b.ToTable("question", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnswerText = "Hanoi",
                            GroupId = 1,
                            QuestionText = "What is the capital city of Vietnam?"
                        },
                        new
                        {
                            Id = 2,
                            AnswerText = "To measure gamma radiation levels",
                            GroupId = 2,
                            QuestionText = "What is the primary function of a gamma spectrometer?"
                        },
                        new
                        {
                            Id = 3,
                            AnswerText = "Wear appropriate protective gear",
                            GroupId = 3,
                            QuestionText = "What is the first step in radiation safety protocol?"
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.QuestionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__question__3213E83F4DFF750F");

                    b.ToTable("question_group", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "General Knowledge"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Technical Questions"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Safety Procedures"
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.SurveyLine", b =>
                {
                    b.Property<int>("SlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlId"));

                    b.Property<decimal>("CompletionPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_delete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("SlId");

                    b.HasIndex("ProjectId");

                    b.ToTable("SurveyLines");

                    b.HasData(
                        new
                        {
                            SlId = 1,
                            CompletionPercentage = 50.0m,
                            CreatedDate = new DateOnly(2025, 1, 20),
                            IsDelete = false,
                            Name = "Survey Line 1",
                            ProjectId = 1,
                            Status = 0
                        },
                        new
                        {
                            SlId = 2,
                            CompletionPercentage = 75.0m,
                            CreatedDate = new DateOnly(2025, 2, 20),
                            IsDelete = false,
                            Name = "Survey Line 2",
                            ProjectId = 1,
                            Status = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.SurveyPoint", b =>
                {
                    b.Property<int>("SpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpId"));

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("address");

                    b.Property<decimal?>("Altitude")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("altitude");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_delete");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(10,8)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(11,8)")
                        .HasColumnName("longitude");

                    b.Property<int>("SurveyLineId")
                        .HasColumnType("int")
                        .HasColumnName("survey_line_id");

                    b.Property<string>("SurveyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("survey_name");

                    b.HasKey("SpId");

                    b.HasIndex("SurveyLineId");

                    b.ToTable("SurveyPoints", (string)null);

                    b.HasData(
                        new
                        {
                            SpId = 1,
                            Address = "Hanoi, Vietnam",
                            Altitude = 10.5m,
                            CreatedDate = new DateOnly(2025, 1, 21),
                            IsDelete = false,
                            Latitude = 21.0285m,
                            Longitude = 105.8542m,
                            SurveyLineId = 1,
                            SurveyName = "Survey Point Alpha"
                        },
                        new
                        {
                            SpId = 2,
                            Address = "Hanoi, Vietnam",
                            Altitude = 12.3m,
                            CreatedDate = new DateOnly(2025, 1, 22),
                            IsDelete = false,
                            Latitude = 21.0245m,
                            Longitude = 105.8412m,
                            SurveyLineId = 1,
                            SurveyName = "Survey Point Beta"
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.User", b =>
                {
                    b.Property<int>("UId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UId"));

                    b.Property<string>("AvtUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CitizenId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UId");

                    b.HasIndex("CitizenId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UId = 1,
                            AvtUrl = "https://example.com/avatar1.jpg",
                            CitizenId = "040203007094",
                            DOB = new DateOnly(2003, 1, 1),
                            Email = "bda2k3@gmail.com",
                            IsDelete = false,
                            IsMale = true,
                            Password = "1",
                            PhoneNumber = "0899070745",
                            RoleId = 1,
                            UserName = "a"
                        },
                        new
                        {
                            UId = 2,
                            AvtUrl = "https://example.com/avatar2.jpg",
                            CitizenId = "987654321098",
                            DOB = new DateOnly(1995, 8, 22),
                            Email = "tranthib@gmail.com",
                            IsDelete = true,
                            IsMale = false,
                            Password = "1",
                            PhoneNumber = "0912345678",
                            RoleId = 2,
                            UserName = "b"
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.VegetationCover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CropPercentage")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("crop_percentage");

                    b.Property<decimal?>("FlowerPercentage")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("flower_percentage");

                    b.Property<decimal?>("ForestPercentage")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("forest_percentage");

                    b.Property<decimal?>("GrassPercentage")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("grass_percentage");

                    b.Property<decimal?>("NaturalForestPercentage")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("natural_forest_percentage");

                    b.Property<decimal?>("Other")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("other");

                    b.Property<decimal?>("SoilPercentage")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("soil_percentage");

                    b.Property<int>("SurveyPointId")
                        .HasColumnType("int")
                        .HasColumnName("survey_point_id");

                    b.HasKey("Id");

                    b.HasIndex("SurveyPointId")
                        .IsUnique();

                    b.ToTable("VegetationCovers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CropPercentage = 10.0m,
                            FlowerPercentage = 5.0m,
                            ForestPercentage = 25.0m,
                            GrassPercentage = 20.0m,
                            NaturalForestPercentage = 20.0m,
                            Other = 5.0m,
                            SoilPercentage = 15.0m,
                            SurveyPointId = 1
                        },
                        new
                        {
                            Id = 2,
                            CropPercentage = 10.0m,
                            FlowerPercentage = 5.0m,
                            ForestPercentage = 20.0m,
                            GrassPercentage = 30.0m,
                            NaturalForestPercentage = 10.0m,
                            Other = 5.0m,
                            SoilPercentage = 20.0m,
                            SurveyPointId = 2
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.XRFInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MeasuringDeviceId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("MeasuringDeviceId");

                    b.ToTable("XRFInfos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MeasuringDeviceId = 3,
                            Note = "Thiết bị kiểm tra tại mỏ A"
                        },
                        new
                        {
                            Id = 2,
                            MeasuringDeviceId = 3,
                            Note = "Thiết bị đang hiệu chuẩn"
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.GammaCalibration", b =>
                {
                    b.HasOne("BusinessObject.Models.MeasuringDevice", "MeasuringDevice")
                        .WithMany("GammaCalibrations")
                        .HasForeignKey("MeasuringDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasuringDevice");
                });

            modelBuilder.Entity("BusinessObject.Models.Hydrology", b =>
                {
                    b.HasOne("BusinessObject.Models.SurveyPoint", "SurveyPoint")
                        .WithOne("Hydrology")
                        .HasForeignKey("BusinessObject.Models.Hydrology", "SurveyPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyPoint");
                });

            modelBuilder.Entity("BusinessObject.Models.LocationDescription", b =>
                {
                    b.HasOne("BusinessObject.Models.SurveyPoint", "SurveyPoint")
                        .WithOne("LocationDescription")
                        .HasForeignKey("BusinessObject.Models.LocationDescription", "SurveyPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyPoint");
                });

            modelBuilder.Entity("BusinessObject.Models.MeasuringDevice", b =>
                {
                    b.HasOne("BusinessObject.Models.DeviceType", "DeviceType")
                        .WithMany("MeasuringDevices")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceType");
                });

            modelBuilder.Entity("BusinessObject.Models.Notification", b =>
                {
                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.PhoGammaInfo", b =>
                {
                    b.HasOne("BusinessObject.Models.MeasuringDevice", "MeasuringDevice")
                        .WithMany("PhoGammaInfos")
                        .HasForeignKey("MeasuringDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasuringDevice");
                });

            modelBuilder.Entity("BusinessObject.Models.Project", b =>
                {
                    b.HasOne("BusinessObject.Models.Proposal", "Proposal")
                        .WithMany("Projects")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("BusinessObject.Models.Proposal", b =>
                {
                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("Proposals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.Question", b =>
                {
                    b.HasOne("BusinessObject.Models.QuestionGroup", "Group")
                        .WithMany("Questions")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK__question__group___398D8EEE");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("BusinessObject.Models.SurveyLine", b =>
                {
                    b.HasOne("BusinessObject.Models.Project", "Project")
                        .WithMany("SurveyLines")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("BusinessObject.Models.SurveyPoint", b =>
                {
                    b.HasOne("BusinessObject.Models.SurveyLine", "SurveyLine")
                        .WithMany("SurveyPoints")
                        .HasForeignKey("SurveyLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyLine");
                });

            modelBuilder.Entity("BusinessObject.Models.VegetationCover", b =>
                {
                    b.HasOne("BusinessObject.Models.SurveyPoint", "SurveyPoint")
                        .WithOne("VegetationCover")
                        .HasForeignKey("BusinessObject.Models.VegetationCover", "SurveyPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyPoint");
                });

            modelBuilder.Entity("BusinessObject.Models.XRFInfo", b =>
                {
                    b.HasOne("BusinessObject.Models.MeasuringDevice", "MeasuringDevice")
                        .WithMany("XRFInfos")
                        .HasForeignKey("MeasuringDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasuringDevice");
                });

            modelBuilder.Entity("BusinessObject.Models.DeviceType", b =>
                {
                    b.Navigation("MeasuringDevices");
                });

            modelBuilder.Entity("BusinessObject.Models.MeasuringDevice", b =>
                {
                    b.Navigation("GammaCalibrations");

                    b.Navigation("PhoGammaInfos");

                    b.Navigation("XRFInfos");
                });

            modelBuilder.Entity("BusinessObject.Models.Project", b =>
                {
                    b.Navigation("SurveyLines");
                });

            modelBuilder.Entity("BusinessObject.Models.Proposal", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("BusinessObject.Models.QuestionGroup", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BusinessObject.Models.SurveyLine", b =>
                {
                    b.Navigation("SurveyPoints");
                });

            modelBuilder.Entity("BusinessObject.Models.SurveyPoint", b =>
                {
                    b.Navigation("Hydrology");

                    b.Navigation("LocationDescription");

                    b.Navigation("VegetationCover");
                });

            modelBuilder.Entity("BusinessObject.Models.User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Proposals");
                });
#pragma warning restore 612, 618
        }
    }
}
